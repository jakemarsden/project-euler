package com.jakemarsden.projecteuler.p29;

import static com.jakemarsden.projecteuler.util.BigMath.bigProduct;

import java.util.HashSet;
import java.util.Set;

final class DistinctPowers {

  /**
   * @return The number of distinct terms in the sequence generated by <code>a<sup>b</sup></code>
   *     for {@code 2 ≤ a ≤ maxA} and {@code 2 ≤ b ≤ maxB}
   */
  int countDistinctTerms(int maxA, int maxB) {
    Set<String> terms = new HashSet<>(maxA * maxB);
    for (int a = 2; a <= maxA; a++) {
      var bigA = Integer.toString(a);
      var term = bigA;

      for (int b = 2; b <= maxB; b++) {
        term = bigProduct(term, bigA);
        terms.add(term);
      }
    }

    return terms.size();
  }
}
